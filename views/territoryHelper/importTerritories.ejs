<h4>Territory Helper | Import Territories</h4>
<form id="th-territory-import">
  <label for="th-territory-file">
    Choose a Territory Helper territory export file to upload
    <input type="file" name="file" id="th-territory-file">
  </label>

  <label for="th-territory">
    Or paste the contents of a territory export file here
    <textarea id="th-territory-json" name="th-territory-json"></textarea>
  </label>

  <button id="th-submit">Submit</button>

  <div class="progress hide">
    <div class="indeterminate"></div>
  </div>

  <div id="error-message"></div>
</form>
<script>
  const submitEl = document.getElementById('th-submit');
  const fileEl = document.getElementById('th-territory-file');
  const jsonEl = document.getElementById('th-territory-json');


  submitEl.addEventListener('click', (e) => {
    e.preventDefault();

    submitEl.setAttribute('disabled', 'disabled');
    const progressEl = document.querySelector('.progress');
    const errorMessageEl = document.getElementById('error-message');
    progressEl.classList.remove('hide');

    const body = jsonEl.value;
    fetch('/territoryhelper/territories', {
      body,
      method: 'POST',
      headers: new Headers({
        'congregationid': 1,
        'content-type': 'application/json',
      }),
    })
      .then((response) => {
        progressEl.classList.add('hide');
        submitEl.removeAttribute('disabled');

        if (response.ok) {
          Materialize.toast('Territories successfully imported.', 5000);
          return;
        }

        Materialize.toast('Error importing territories.', 5000);
        return response.text().then(x => errorMessageEl.innerText);
      })
      .catch((err) => {
        submitEl.removeAttribute('disabled');

        Materialize.toast(err, 5000);
      });
  });

  fileEl.addEventListener('change', (e) => {
    const { files } = e.target;
    if (files.length) {
      Materialize.toast('Loading file', 5000);

      loadFile(e.target)
        .then(json => {
          jsonEl.innerText = JSON.stringify(JSON.parse(json), null, 2);
        })
        .catch((err) => {
          Materialize.toast(`Error reading file: ${err}`, 5000);
        });
    } else {
      jsonEl.innerText = '';
    }
  });

</script>
<script type="text/javascript">
  function loadFile(input) {
    return new Promise((resolve, reject) => {
      if (!input.files[0]) {
        return reject('Select a file');
      }

      const fr = new FileReader();
      fr.onload = e => resolve(e.target.result);
      fr.onerror = reject;

      const file = input.files[0];
      fr.readAsText(file)
    });
  }
</script>
